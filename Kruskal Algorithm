// Disjoint Class Union by rank or size
class DisjointSet
{
    vector<int> parent;
    vector<int> size;
    
    public:
    DisjointSet(int n)
    {
        parent.resize(n+1);
        size.resize(n+1);
        
        for(int i=0;i<=n;i++)
        {
            parent[i]=i;
            size[i]=1;
        }
    }
    
    int findUParent(int node)
    {
        if(node==parent[node])
        {
            return node;
        }
        
        return parent[node]=findUParent(parent[node]);
    }
    
    void unionBySize(int u, int v)
    {
        int ulp_u=findUParent(u);
        int ulp_v=findUParent(v);
        
        if(ulp_u==ulp_v)
        {
            return;
        }
        
        if(size[ulp_u]<size[ulp_v])
        {
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else
        {
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        // adjacency list to edges
        // {weight, u,v}}
        vector<pair<int, pair<int,int>>> edges;
        
        for(int i=0;i<V;i++)
        {
            for(auto j: adj[i])
            {
                int adjNode=j[0];
                int wt=j[1];
                int node=i;
                
                edges.push_back({wt, {node, adjNode}});
            }
        }
        
        // sort edges
        sort(edges.begin(), edges.end());
        
        DisjointSet ds(V);
        int mstWt=0;
        
        for(auto i: edges)
        {
            int wt=i.first;
            int u=i.second.first;
            int v=i.second.second;
            
            if(ds.findUParent(u)!=ds.findUParent(v))
            {
                mstWt+=wt;
                ds.unionBySize(u, v);
            }
        }
        
        return mstWt;
    }
};
