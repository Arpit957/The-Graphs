//User function Template for C++

class Solution{
    public:
        int minimumEdgeReversal(vector<vector<int>> &edges,int n,int src,int dst)
        {
           vector<vector<vector<int> > >adj(n+1);
           
           for(auto i:edges){
               adj[i[0]].push_back({i[1],0});
               adj[i[1]].push_back({i[0],1});
           }
           
           priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
           
           pq.push({0,src});
           
           vector<int>vis(n+1,0);
           while(!pq.empty()){
               int node = pq.top().second;
               int cost = pq.top().first;
               pq.pop();
               
               if(node == dst)return cost;
               
               if(vis[node])continue;
               
               vis[node] = 1;
               
               for(auto i:adj[node]){
                   int nextnode = i[0];
                   int nextcost = i[1];
                   
                   if(vis[nextnode] == 0){
                       pq.push({nextcost+cost,nextnode});
                   }
               }
           }
            return -1;
        }
};
