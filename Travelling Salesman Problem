//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
public:
int helper(int curr_city, int n, vector<vector<int>>&cost, int mask,vector<vector<int>> &dp)
{
    if(mask == ((1 << n)-1)) return cost[curr_city][0];
    
    if(dp[curr_city][mask] != -1) return dp[curr_city][mask];
    
    int res = INT_MAX;
    
    for(int city=0; city<n; city++)
    {
        //if the corrresponding city set bit is set to zero it means we can visit
        if((mask & (1 << city)) == 0)
        {
            int temp = cost[curr_city][city] + helper(city,n,cost,(mask|(1<<city)),dp);
            res = min(res,temp);
        }
    }
    return dp[curr_city][mask] = res;
}

int total_cost(vector<vector<int>>cost){
        int n = cost.size();
        vector<vector<int>> dp(n+1, vector<int>(1<<n, -1));
        return helper(0,n,cost,1,dp); 
    }
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>cost(n, vector<int>(n, 0));
		for(int i = 0; i < n; i++)
			for(int j = 0; j < n; j++)cin >> cost[i][j];
		Solution obj;
		int ans = obj.total_cost(cost);
		cout << ans <<"\n";
	}
	return 0;
}
// } Driver Code Ends
