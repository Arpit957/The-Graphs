//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution
{
    void dfs(int node,unordered_map<int,bool>&visited,stack<int>&st,vector<int>adj[]){
    
        visited[node] = true;
        
        for(auto nbr: adj[node]){
            if(!visited[nbr]){
                dfs(nbr,visited,st,adj);
            }
        }
        
        st.push(node);
    }
    
    void revdfs(int node,unordered_map<int,bool>&visited,vector<int>adj[]){
        visited[node] = true;
        
        for(auto nbr: adj[node]){
            if(!visited[nbr]){
                revdfs(nbr,visited,adj);
            }
        }
    }
    
    
	public:
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<int> adj[])
    {
        //code here
        unordered_map<int,bool>visited;
        stack<int>st;
        
        for(int i =0;i<V;i++){
            if(!visited[i]){
                dfs(i,visited,st,adj);
            }
        }
        
        
        
        //do transpose
        vector<int>transpose[V];
       // unordered_map<int,list<int> >transpose;
         for(int i =0 ;i<V;i++){
             visited[i] = false;
             for(auto nbr:adj[i]){
                 transpose[nbr].push_back(i);
             }
         }
         
         
         //count SCC
         
         int count = 0;
         while(!st.empty()){
             int tops = st.top();
             st.pop();
             if(!visited[tops]){
                 count++;
                 revdfs(tops,visited,transpose);
             }
         }
         
         
         return count;
    }
};

//{ Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
