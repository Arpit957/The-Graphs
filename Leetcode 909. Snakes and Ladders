class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        
       int n = board.size();
        
        unordered_map<int,int> mp;
        
        for(int i =n-1;i>=0;i--){
            for(int j =0;j<n;j++){
                
                if(board[i][j]!=-1){
                    
                    //if row is even
                    int val;
                    if ((n-i)%2 !=0){
                        val = (n-1-i)*n + j +1;
                        
                    } 
                    else{
                        val = (n-1-i)*n + n-j;
                    }
                    
                    mp[val]=board[i][j];
                    
                }
                
            }
        }
            
            
            //by bfs
            queue<pair<int,int> >q;
            q.push(make_pair(1,0));
            
            vector<int>visited(n*n+1,false);
            
            while(!q.empty()){
                
                //int element = q.front();
                
                int node = q.front().first;
                int moves = q.front().second;
                
                q.pop();
                
                if(node==n*n)return moves;
                //if()
                
                if(visited[node])continue;
                
                visited[node]=true;
                
                for(int dice=1;dice<=6;dice++){
                    
                    if(node+dice > n*n)continue;
                    
                    int x = node+dice;
                    
                    if(mp.find(x) != mp.end())
                        x = mp[x];
                        
                       // q.push(make_pair(x,moves++));  
                    q.push(make_pair(x,moves+1));
                }
            }
            
        return -1;
        
    }
};
