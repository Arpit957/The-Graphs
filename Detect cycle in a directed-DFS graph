class Solution {
    
    bool cycle(int node, vector<bool>&visited, vector<bool>&dfsvisited, vector<int>adj[]){
       visited[node]=true;
       dfsvisited[node]=true;
       
       for(auto i: adj[node]){
           if(!visited[i]){
               if(cycle(i,visited,dfsvisited,adj))
               return true;
           }
           else if(dfsvisited[i]==true)
           return true;
       }
       dfsvisited[node]=false;
       return false;
   }

  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        // code here

         vector<bool>visited(V,false);
       
       vector<bool>dfsvisited(V,false);
       
       for(int i=0 ;i<V; i++){
           if(!visited[i]){
               if(cycle(i,visited,dfsvisited,adj))
               return true;
           }
       }
       return false;
       
   }
};
